@inproceedings{10.1145/3550356.3561592,
author = {Yang, Song and Sahraoui, Houari},
title = {Towards automatically extracting UML class diagrams from natural language specifications},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3561592},
doi = {10.1145/3550356.3561592},
abstract = {In model-driven engineering (MDE), UML class diagrams serve as a way to plan and communicate between developers. However, it is complex and resource-consuming. We propose an automated approach for the extraction of UML class diagrams from natural language software specifications. To develop our approach, we create a dataset of UML class diagrams and their English specifications with the help of volunteers. Our approach is a pipeline of steps consisting of the segmentation of the input into sentences, the classification of the sentences, the generation of UML class diagram fragments from sentences, and the composition of these fragments into one UML class diagram. We develop a quantitative testing framework specific to UML class diagram extraction. Our approach yields low precision and recall but serves as a benchmark for future research.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {396–403},
numpages = {8},
keywords = {natural language processing, model-driven engineering, machine learning, domain modeling},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3551349.3561166,
author = {Rodrigues dos Reis, Gustavo and Mos, Adrian and Cortes-Cornax, Mario and Labb\'{e}, Cyril},
title = {Prototyping Deep Learning Applications with Non-Experts: An Assistant Proposition},
year = {2023},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3551349.3561166},
doi = {10.1145/3551349.3561166},
abstract = {Machine learning (ML) systems based on deep neural networks are more present than ever in software solutions for numerous industries. Their inner workings relying on models learning with data are as helpful as they are mysterious for non-expert people. There is an increasing need to make the design and development of those solutions accessible to a more general public while at the same time making them easier to explore. In this paper, to address this need, we discuss a proposition of a new assisted approach, centered on the downstream task to be performed, for helping practitioners to start using and applying Deep Learning (DL) techniques. This proposal, supported by an initial testbed UI prototype, uses an externalized form of knowledge, where JSON files compile different pipeline metadata information with their respective related artifacts (e.g., model code, the dataset to be loaded, good hyperparameter choices) that are presented as the user interacts with a conversational agent to suggest candidate solutions for a given task.},
booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
articleno = {144},
numpages = {3},
keywords = {low-code, deep learning, artificial intelligence},
location = {<conf-loc>, <city>Rochester</city>, <state>MI</state>, <country>USA</country>, </conf-loc>},
series = {ASE '22}
}

@inproceedings{10.1145/3550356.3561576,
author = {Kirchhof, J\"{o}rg Christian and Kusmenko, Evgeny and Ritz, Jonas and Rumpe, Bernhard and Moin, Armin and Badii, Atta and G\"{u}nnemann, Stephan and Challenger, Moharram},
title = {MDE for machine learning-enabled software systems: a case study and comparison of MontiAnna \&amp; ML-Quadrat},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3561576},
doi = {10.1145/3550356.3561576},
abstract = {In this paper, we propose to adopt the MDE paradigm for the development of Machine Learning (ML)-enabled software systems with a focus on the Internet of Things (IoT) domain. We illustrate how two state-of-the-art open-source modeling tools, namely MontiAnna and ML-Quadrat can be used for this purpose as demonstrated through a case study. The case study illustrates using ML, in particular deep Artificial Neural Networks (ANNs), for automated image recognition of handwritten digits using the MNIST reference dataset, and integrating the machine learning components into an IoT-system. Subsequently, we conduct a functional comparison of the two frameworks, setting out an analysis base to include a broad range of design considerations, such as the problem domain, methods for the ML integration into larger systems, and supported ML methods, as well as topics of recent intense interest to the ML community, such as AutoML and MLOps. Accordingly, this paper is focused on elucidating the potential of the MDE approach in the ML domain. This supports the ML-engineer in developing the (ML/software) model rather than implementing the code, and additionally enforces reusability and modularity of the design through enabling the out-of-the-box integration of ML functionality as a component of the IoT or cyber-physical systems.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {380–387},
numpages = {8},
keywords = {tools, model-driven engineering, machine learning, domain specific modeling, artificial intelligence},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1109/ICSE-NIER58687.2023.00019,
author = {Reimann, Lars and Kniesel-W\"{u}nsche, G\"{u}nter},
title = {Safe-DS: A Domain Specific Language to Make Data Science Safe},
year = {2023},
isbn = {9798350300390},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-NIER58687.2023.00019},
doi = {10.1109/ICSE-NIER58687.2023.00019},
abstract = {Due to the long runtime of Data Science (DS) pipelines, even small programming mistakes can be very costly, if they are not detected statically. However, even basic static type checking of DS pipelines is difficult because most are written in Python. Static typing is available in Python only via external linters. These require static type annotations for parameters or results of functions, which many DS libraries do not provide.In this paper, we show how the wealth of Python DS libraries can be used in a statically safe way via Safe-DS, a domain specific language (DSL) for DS. Safe-DS catches conventional type errors plus errors related to range restrictions, data manipulation, and call order of functions, going well beyond the abilities of current Python linters. Python libraries are integrated into Safe-DS via a stub language for specifying the interface of its declarations, and an API-Editor that is able to extract type information from the code and documentation of Python libraries, and automatically generate suitable stubs.Moreover, Safe-DS complements textual DS pipelines with a graphical representation that eases safe development by preventing syntax errors. The seamless synchronization of textual and graphic view lets developers always choose the one best suited for their skills and current task.We think that Safe-DS can make DS development easier, faster, and more reliable, significantly reducing development costs.},
booktitle = {Proceedings of the 45th International Conference on Software Engineering: New Ideas and Emerging Results},
pages = {72–77},
numpages = {6},
keywords = {domain specific language, schema types, refined types, static safety, machine learning, data science},
location = {Melbourne, Australia},
series = {ICSE-NIER '23}
}

@inproceedings{10.1145/3550356.3561568,
author = {Baumann, Nils and Kusmenko, Evgeny and Ritz, Jonas and Rumpe, Bernhard and Weber, Moritz Benedikt},
title = {Dynamic data management for continuous retraining},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3561568},
doi = {10.1145/3550356.3561568},
abstract = {Managing dynamic datasets intended to serve as training data for a Machine Learning (ML) model often emerges as very challenging, especially when data is often altered iteratively and already existing ML models should pertain to the data. For example, this applies when new data versions arise from either a generated or aggregated extension of an existing dataset a model has already been trained on. In this work, it is investigated on how a model-based approach for these training data concerns can be provided as well as how the complete process, including the resulting training and retraining process of the ML model, can therein be integrated. Hence, model-based concepts and the implementation are devised to cope with the complexity of iterative data management as an enabler for the integration of continuous retraining routines. With Deep Learning techniques becoming technically feasible and massively being developed further over the last decade, MLOps, aiming to establish DevOps tailored to ML projects, gained crucial relevance. Unfortunately, data-management concepts for iteratively growing datasets with retraining capabilities embedded in a model-driven ML development methodology are unexplored to the best of our knowledge. To fill in this gap, this contribution provides such agile data management concepts and integrates them and continuous retraining into the model-driven ML Framework MontiAnna [18]. The new functionality is evaluated in the context of a research project where ML is exploited for the optimal design of lattice structures for crash applications.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {359–366},
numpages = {8},
keywords = {retraining, model-driven engineering, data management, artificial intelligence},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1109/RoSE.2019.00012,
author = {Gerasimou, Simos and Matragkas, Nicholas and Calinescu, Radu},
title = {Towards systematic engineering of collaborative heterogeneous robotic systems},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/RoSE.2019.00012},
doi = {10.1109/RoSE.2019.00012},
abstract = {Collaborative heterogeneous robotic systems are distributed and interconnected multi-robot systems whose members can have different capabilities and can perform specialised tasks. Existing engineering processes and tools facilitate the development of various robotic aspects including kinematics, sensing and, architecture, through high-level design and low-level code generation. Although there are several frameworks and middleware, providing infrastructure for the development of single-robot and homogeneous multi-robot applications, there is lack of systematic methods and tools supporting the engineering of heterogeneous multi-robot systems and the analysis of collaborative intelligence. In this paper, we present our vision for a framework that supports the specification of collaborative heterogeneous robotic systems, generation of platform-specific code, and efficient exploration and exercise of collective intelligence algorithms.},
booktitle = {Proceedings of the 2nd International Workshop on Robotics Software Engineering},
pages = {25–28},
numpages = {4},
keywords = {software engineering, robotic systems, model-driven engineering, domain-specific language, collective intelligence},
location = {Montreal, Quebec, Canada},
series = {RoSE '19}
}

@inproceedings{10.1109/MODELS-C.2019.00099,
author = {Savary-Leblanc, Maxime},
title = {Improving MBSE tools UX with AI-empowered software assistants},
year = {2021},
isbn = {9781728151250},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MODELS-C.2019.00099},
doi = {10.1109/MODELS-C.2019.00099},
abstract = {Model Based Software Engineering (MBSE) consists in applying Model-Based Engineering principles - mostly abstraction and automation - to software engineering practices. As concluded by several empirical studies during the past 10 years, applying MBSE methodology is no more a question and we shall now wonder how to do it rather than if we should. One of the major criticisms of MBSE remains about the available tooling to apply its methodology. Multiple surveys show that the usability of tools and the lack of skills from the user are two key barriers that still slow down the spread of the MBSE approach. In the meantime, these surveys also highlight the difficulties software engineers often encounter during the modeling activity itself, regardless of the tool. Indeed, complex operations such as problem-to-model mapping, consistency checking or error identification are still often manually performed by humans. The recent advances in AIs introduced new software-based systems able to interact with their users to help them in their daily life. The purpose of this PhD is to investigate how such AIs (which we will call software assistants) could help software engineers to face the complexity of software modeling. Interactions between software assistants and users of MBSE tools will be the bulk of this work. We plan to implement software assistants and provide them an access to a high-quality knowledge repository on models that we will build to study these interactions. Based on these studies, we hope to contribute laying the foundations of interactions with software assistants. The end result will feature a knowledge repository and a Software Assistant acting together to help users modeling by catering for new ideas, recommendations and help. This work will also provide frameworks to create knowledge repositories and IDE-embedded software assistants.},
booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
pages = {648–652},
numpages = {5},
keywords = {modeling tools, model-driven engineering, digital assistants, artificial intelligence},
location = {Munich, Germany},
series = {MODELS '19}
}

@inproceedings{10.1145/3550356.3561609,
author = {Bergelin, Johan and Strandberg, Per Erik},
title = {Industrial requirements for supporting AI-enhanced model-driven engineering},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3561609},
doi = {10.1145/3550356.3561609},
abstract = {There is an increasing interest in research on the combination of AI techniques and methods with MDE. However, there is a gap between AI and MDE practices, as well as between researchers and practitioners. This paper tackles this gap by reporting on industrial requirements in this field. In the AIDOaRt research project, practitioners and researchers collaborate on AI-augmented automation supporting modeling, coding, testing, monitoring, and continuous development in cyber-physical systems. The project specifically lies at the intersection of industry and academia collaboration with several industrial use cases. Through a process of elicitation and refinement, 78 high-level requirements were defined, and generalized into 30 generic requirements by the AIDOaRt partners. The main contribution of this paper is the set of generic requirements from the project for enhancing the development of cyber-physical systems with artificial intelligence, DevOps, and model-driven engineering, identifying the hot spots of industry needs in the interactions of MDE and AI. Future work will refine, implement and evaluate solutions toward these requirements in industry contexts.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {375–379},
numpages = {5},
keywords = {requirements, model-driven engineering, cyber-physical systems, artificial intelligence},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3486635.3491072,
author = {Iyer, C. V. Krishnakumar and Hou, Feili and Wang, Henry and Wang, Yonghong and Oh, Kay and Ganguli, Swetava and Pandey, Vipul},
title = {Trinity: A No-Code AI platform for complex spatial datasets},
year = {2021},
isbn = {9781450391207},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486635.3491072},
doi = {10.1145/3486635.3491072},
abstract = {We present a no-code Artificial Intelligence (AI) platform called Trinity with the main design goal of enabling both machine learning researchers and non-technical geospatial domain experts to experiment with domain-specific signals and datasets for solving a variety of complex problems on their own. This versatility to solve diverse problems is achieved by transforming complex Spatio-temporal datasets to make them consumable by standard deep learning models, in this case, Convolutional Neural Networks (CNNs), and giving the ability to formulate disparate problems in a standard way, eg. semantic segmentation. With an intuitive user interface, a feature store that hosts derivatives of complex feature engineering, a deep learning kernel, and a scalable data processing mechanism, Trinity provides a powerful platform for domain experts to share the stage with scientists and engineers in solving business-critical problems. It enables quick prototyping, rapid experimentation and reduces the time to production by standardizing model building and deployment. In this paper, we present our motivation behind Trinity and its design along with showcasing sample applications to motivate the idea of lowering the bar to using AI.},
booktitle = {Proceedings of the 4th ACM SIGSPATIAL International Workshop on AI for Geographic Knowledge Discovery},
pages = {33–42},
numpages = {10},
keywords = {Semantic Segmentation, No Code platform, Machine Learning Platform, Machine Learning, Geospatial Intelligence, Deep Learning},
location = {Beijing, China},
series = {GEOAI '21}
}

@inproceedings{10.1145/2908080.2908105,
author = {Truong, Leonard and Barik, Rajkishore and Totoni, Ehsan and Liu, Hai and Markley, Chick and Fox, Armando and Shpeisman, Tatiana},
title = {Latte: a language, compiler, and runtime for elegant and efficient deep neural networks},
year = {2016},
isbn = {9781450342612},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2908080.2908105},
doi = {10.1145/2908080.2908105},
abstract = {Deep neural networks (DNNs) have undergone a surge in popularity with consistent advances in the state of the art for tasks including image recognition, natural language processing, and speech recognition. The computationally expensive nature of these networks has led to the proliferation of implementations that sacrifice abstraction for high performance. In this paper, we present Latte, a domain-specific language for DNNs that provides a natural abstraction for specifying new layers without sacrificing performance. Users of Latte express DNNs as ensembles of neurons with connections between them. The Latte compiler synthesizes a program based on the user specification, applies a suite of domain-specific and general optimizations, and emits efficient machine code for heterogeneous architectures. Latte also includes a communication runtime for distributed memory data-parallelism. Using networks described using Latte, we demonstrate 3-6x speedup over Caffe (C++/MKL) on the three state-of-the-art ImageNet models executing on an Intel Xeon E5-2699 v3 x86 CPU.},
booktitle = {Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {209–223},
numpages = {15},
keywords = {Optimization, Neural Networks, Domain Specific Language, Deep Learning, Compiler},
location = {Santa Barbara, CA, USA},
series = {PLDI '16}
}

@article{10.1145/2980983.2908105,
author = {Truong, Leonard and Barik, Rajkishore and Totoni, Ehsan and Liu, Hai and Markley, Chick and Fox, Armando and Shpeisman, Tatiana},
title = {Latte: a language, compiler, and runtime for elegant and efficient deep neural networks},
year = {2016},
issue_date = {June 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2980983.2908105},
doi = {10.1145/2980983.2908105},
abstract = {Deep neural networks (DNNs) have undergone a surge in popularity with consistent advances in the state of the art for tasks including image recognition, natural language processing, and speech recognition. The computationally expensive nature of these networks has led to the proliferation of implementations that sacrifice abstraction for high performance. In this paper, we present Latte, a domain-specific language for DNNs that provides a natural abstraction for specifying new layers without sacrificing performance. Users of Latte express DNNs as ensembles of neurons with connections between them. The Latte compiler synthesizes a program based on the user specification, applies a suite of domain-specific and general optimizations, and emits efficient machine code for heterogeneous architectures. Latte also includes a communication runtime for distributed memory data-parallelism. Using networks described using Latte, we demonstrate 3-6x speedup over Caffe (C++/MKL) on the three state-of-the-art ImageNet models executing on an Intel Xeon E5-2699 v3 x86 CPU.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {209–223},
numpages = {15},
keywords = {Optimization, Neural Networks, Domain Specific Language, Deep Learning, Compiler}
}

@inproceedings{10.1145/3411764.3445267,
author = {DeLine, Robert A},
title = {Glinda: Supporting Data Science with Live Programming, GUIs and a Domain-specific Language},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411764.3445267},
doi = {10.1145/3411764.3445267},
abstract = {Researchers have explored several avenues to mitigate data scientists’ frustrations with computational notebooks, including: (1) live programming, to keep notebook results consistent and up to date; (2) supplementing scripting with graphical user interfaces (GUIs), to improve ease of use; and (3) providing domain-specific languages (DSLs), to raise a script’s level of abstraction. This paper introduces Glinda, which combines these three approaches by providing a live programming experience, with interactive results, for a domain-specific language for data science. The language’s compiler uses an open-ended set of “recipes” to execute steps in the user’s data science workflow. Each recipe is intended to combine the expressiveness of a written notation with the ease-of-use of a GUI. Live programming provides immediate feedback to a user’s input, whether in the form of program edits or GUI gestures. In a qualitative evaluation with 12 professional data scientists, participants highly rated the live programming and interactive results. They found the language productive and sufficiently expressive and suggested opportunities to extend it.},
booktitle = {Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
articleno = {309},
numpages = {11},
keywords = {live programming, exploratory programming, domain-specific language, data science},
location = {<conf-loc>, <city>Yokohama</city>, <country>Japan</country>, </conf-loc>},
series = {CHI '21}
}

@inproceedings{10.1145/3550356.3559096,
author = {L\'{o}pez, Jos\'{e} Antonio Hern\'{a}ndez and Izquierdo, Javier Luis C\'{a}novas and Cuadrado, Jes\'{u}s S\'{a}nchez},
title = {Using the ModelSet dataset to support machine learning in model-driven engineering},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3559096},
doi = {10.1145/3550356.3559096},
abstract = {The availability of curated collections of models is essential for the application of techniques like Machine Learning (ML) and Data Analytics to MDE as well as to boost research activities. However, many applications of ML to address MDE tasks are currently limited to small datasets. In this demo paper, we will present ModelSet, a dataset composed of 5,466 Ecore models and 5,120 UML models which have been manually labelled to support ML tasks (http://modelset.github.io). ModelSet is built upon the models collected by the MAR search engine (http://mar-search.org), which provides more than 500,000 models of different types. We will describe the structure of the dataset and we will explain how to use the associated library to develop ML applications in Python. Finally, we will describe some applications which can be addressed using ModelSet.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {66–70},
numpages = {5},
keywords = {model-driven engineering, model classification, machine learning},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3550355.3552461,
author = {L\'{o}pez, Jos\'{e} Antonio Hern\'{a}ndez and Rubei, Riccardo and Cuadrado, Jes\'{u}s S\'{a}nchez and di Ruscio, Davide},
title = {Machine learning methods for model classification: a comparative study},
year = {2022},
isbn = {9781450394666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550355.3552461},
doi = {10.1145/3550355.3552461},
abstract = {In the quest to reuse modeling artifacts, academics and industry have proposed several model repositories over the last decade. Different storage and indexing techniques have been conceived to facilitate searching capabilities to help users find reusable artifacts that might fit the situation at hand. In this respect, machine learning (ML) techniques have been proposed to categorize and group large sets of modeling artifacts automatically. This paper reports the results of a comparative study of different ML classification techniques employed to automatically label models stored in model repositories. We have built a framework to systematically compare different ML models (feed-forward neural networks, graph neural networks, k-nearest neighbors, support version machines, etc.) with varying model encodings (TF-IDF, word embeddings, graphs and paths). We apply this framework to two datasets of about 5,000 Ecore and 5,000 UML models. We show that specific ML models and encodings perform better than others depending on the characteristics of the available datasets (e.g., the presence of duplicates) and on the goals to be achieved.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
pages = {165–175},
numpages = {11},
keywords = {model-driven engineering, model classification, machine learning},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3613372.3613405,
author = {Gomes, Anderson and Maia, Paulo Henrique M.},
title = {DoME: An Architecture for Domain Model Evolution at Runtime Using NLP},
year = {2023},
isbn = {9798400707872},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3613372.3613405},
doi = {10.1145/3613372.3613405},
abstract = {In traditional information systems, domain models are represented as database tables with attributes and relationships. Changes in the domain models exist due to system evolution and the emergence of new requirements. In these applications, domain models evolve using CRUD operations requested by users. However, it is necessary to support changes in domain models during the applications’ runtime when new (unforeseen) situations may occur. This work presents an architecture called DoME, which relies on natural language processing (NLP) to allow users to trigger changes in the domain models and self-adaptation techniques to update the models at runtime. It is instantiated in a concrete architecture using a chatbot in Telegram and Transformers Libraries for NLP. The architecture has been preliminary evaluated regarding its assertiveness and user satisfaction, resulting in an 82.55\% hit rate and confirming that NL provides good usability and facilitates data manipulation.},
booktitle = {Proceedings of the XXXVII Brazilian Symposium on Software Engineering},
pages = {186–195},
numpages = {10},
keywords = {Software Architecture, Natural Language Processing, Generative Artificial Intelligence, Domain Modelling.},
location = {<conf-loc>, <city>Campo Grande</city>, <country>Brazil</country>, </conf-loc>},
series = {SBES '23}
}

@inproceedings{10.1145/3594671.3594690,
author = {Moin, Armin and Badii, Atta and Challenger, Moharram},
title = {Model-Driven Quantum Federated Learning (QFL)},
year = {2023},
isbn = {9798400707551},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3594671.3594690},
doi = {10.1145/3594671.3594690},
abstract = {Recently, several studies have proposed frameworks for Quantum Federated Learning (QFL). For instance, the Google TensorFlow Quantum (TFQ) and TensorFlow Federated (TFF) libraries have been deployed for realizing QFL. However, developers, in the main, are not as yet familiar with Quantum Computing (QC) libraries and frameworks. A Domain-Specific Modeling Language (DSML) that provides an abstraction layer over the underlying QC and Federated Learning (FL) libraries would be beneficial. This could enable practitioners to carry out software development and data science tasks efficiently while deploying the state of the art in Quantum Machine Learning (QML). In this position paper, we propose extending existing domain-specific Model-Driven Engineering (MDE) tools for Machine Learning (ML) enabled systems, such as MontiAnna, ML-Quadrat, and GreyCat, to support QFL.},
booktitle = {Companion Proceedings of the 7th International Conference on the Art, Science, and Engineering of Programming},
pages = {111–113},
numpages = {3},
keywords = {quantum computing, model-driven engineering, federated machine learning},
location = {<conf-loc>, <city>Tokyo</city>, <country>Japan</country>, </conf-loc>},
series = {Programming '23}
}

@inproceedings{10.1145/3243127.3243128,
author = {Claris\'{o}, Robert and Cabot, Jordi},
title = {Applying graph kernels to model-driven engineering problems},
year = {2018},
isbn = {9781450359726},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243127.3243128},
doi = {10.1145/3243127.3243128},
abstract = {Machine Learning (ML) can be used to analyze and classify large collections of graph-based information, e.g. images, location information, the structure of molecules and proteins, ... Graph kernels is one of the ML techniques typically used for such tasks.  In a software engineering context, models of a system such as structural or architectural diagrams can be viewed as labeled graphs. Thus, in this paper we propose to employ graph kernels for clustering software modeling artifacts. Among other benefits, this would improve the efficiency and usability of a variety of software modeling activities, e.g., design space exploration, testing or verification and validation.},
booktitle = {Proceedings of the 1st International Workshop on Machine Learning and Software Engineering in Symbiosis},
pages = {1–5},
numpages = {5},
keywords = {model diversity, graph kernel, clustering, Model-Driven Engineering, Machine Learning},
location = {Montpellier, France},
series = {MASES 2018}
}

@inproceedings{10.1145/3550355.3552401,
author = {Yohannis, Alfa and Kolovos, Dimitris},
title = {Towards model-based bias mitigation in machine learning},
year = {2022},
isbn = {9781450394666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550355.3552401},
doi = {10.1145/3550355.3552401},
abstract = {Models produced by machine learning are not guaranteed to be free from bias, particularly when trained and tested with data produced in discriminatory environments. The bias can be unethical, mainly when the data contains sensitive attributes, such as sex, race, age, etc. Some approaches have contributed to mitigating such biases by providing bias metrics and mitigation algorithms. The challenge is users have to implement their code in general/statistical programming languages, which can be demanding for users with little programming and fairness in machine learning experience. We present FairML, a model-based approach to facilitate bias measurement and mitigation with reduced software development effort. Our evaluation shows that FairML requires fewer lines of code to produce comparable measurement values to the ones produced by the baseline code.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
pages = {143–153},
numpages = {11},
keywords = {model-driven engineering, machine learning, generative programming, bias mitigation, bias metrics},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3486609.3487199,
author = {Atouani, Abdallah and Kirchhof, J\"{o}rg Christian and Kusmenko, Evgeny and Rumpe, Bernhard},
title = {Artifact and reference models for generative machine learning frameworks and build systems},
year = {2021},
isbn = {9781450391122},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486609.3487199},
doi = {10.1145/3486609.3487199},
abstract = {Machine learning is a discipline which has become ubiquitous in the last few years. While the research of machine learning algorithms is very active and continues to reveal astonishing possibilities on a regular basis, the wide usage of these algorithms is shifting the research focus to the integration, maintenance, and evolution of AI-driven systems. Although there is a variety of machine learning frameworks on the market, there is little support for process automation and DevOps in machine learning-driven projects. In this paper, we discuss how metamodels can support the development of deep learning frameworks and help deal with the steadily increasing variety of learning algorithms. In particular, we present a deep learning-oriented artifact model which serves as a foundation for build automation and data management in iterative, machine learning-driven development processes. Furthermore, we show how schema and reference models can be used to structure and maintain a versatile deep learning framework. Feasibility is demonstrated on several state-of-the-art examples from the domains of image and natural language processing as well as decision making and autonomous driving.},
booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {55–68},
numpages = {14},
keywords = {training, reference models, metamodeling, machine learning, compiler, build systems, artificial intelligence, artifact models},
location = {Chicago, IL, USA},
series = {GPCE 2021}
}

@inproceedings{10.1109/ICSE-NIER.2017.13,
author = {Sankaran, Anush and Aralikatte, Rahul and Mani, Senthil and Khare, Shreya and Panwar, Naveen and Gantayat, Neelamadhav},
title = {DARVIZ: deep abstract representation, visualization, and verification of deep learning models},
year = {2017},
isbn = {9781538626757},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-NIER.2017.13},
doi = {10.1109/ICSE-NIER.2017.13},
abstract = {Traditional software engineering programming paradigms are mostly object or procedure oriented, driven by deterministic algorithms. With the advent of deep learning and cognitive sciences there is an emerging trend for data-driven programming, creating a shift in the programming paradigm among the software engineering communities. Visualizing and interpreting the execution of a current large scale data-driven software development is challenging. Further, for deep learning development there are many libraries in multiple programming languages such as TensorFlow (Python), CAFFE (C++), Theano (Python), Torch (Lua), and Deeplearning4j (Java), driving a huge need for interoperability across libraries.We propose a model driven development based solution frame-work, that facilitates intuitive designing of deep learning models in a platform agnostic fashion. This framework could potentially generate library specific code, perform program translation across languages, and debug the training process of a deep learning model from a fault localization and repair perspective. Further we identify open research problems in this emerging domain, and discuss some new software tooling requirements to serve this new age data-driven programming paradigm.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering: New Ideas and Emerging Results Track},
pages = {47–50},
numpages = {4},
keywords = {visualization, software tools, model validation, model driven development, deep learning},
location = {Buenos Aires, Argentina},
series = {ICSE-NIER '17}
}

@inproceedings{10.1145/3510454.3516841,
author = {Moin, Armin and Mituca, Andrei and Challenger, Moharram and Badii, Atta and G\"{u}nnemann, Stephan},
title = {ML-quadrat \&amp; DriotData: a model-driven engineering tool and a low-code platform for smart IoT services},
year = {2022},
isbn = {9781450392235},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510454.3516841},
doi = {10.1145/3510454.3516841},
abstract = {In this paper, we present ML-Quadrat, an open-source research prototype that is based on the Eclipse Modeling Framework (EMF) and the state of the art in the literature of Model-Driven Software Engineering (MDSE) for smart Cyber-Physical Systems (CPS) and the Internet of Things (IoT). Its envisioned users are mostly software developers who might not have deep knowledge and skills in the heterogeneous IoT platforms and the diverse Artificial Intelligence (AI) technologies, specifically regarding Machine Learning (ML). ML-Quadrat is released under the terms of the Apache 2.0 license on Github1. Additionally, we demonstrate an early tool prototype of DriotData, a web-based Low-Code platform targeting citizen data scientists and citizen/end-user software developers. DriotData exploits and adopts ML-Quadrat in the industry by offering an extended version of it as a subscription-based service to companies, mainly Small- and Medium-Sized Enterprises (SME). The current preliminary version of DriotData has three web-based model editors: text-based, tree-/form-based and diagram-based. The latter is designed for domain experts in the problem or use case domains (namely the IoT vertical domains) who might not have knowledge and skills in the field of IT. Finally, a short video demonstrating the tools is available on YouTube: https://youtu.be/VAuz25w0a5k.},
booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Companion Proceedings},
pages = {144–148},
numpages = {5},
keywords = {model-driven software engineering, machine learning, low-code, iot, domain-specific modeling},
location = {Pittsburgh, Pennsylvania},
series = {ICSE '22}
}

@inproceedings{10.1109/ICSE-Companion58688.2023.00060,
author = {Xue, Qiaomu},
title = {Automating Code Generation for MDE Using Machine Learning},
year = {2023},
isbn = {9798350322637},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion58688.2023.00060},
doi = {10.1109/ICSE-Companion58688.2023.00060},
abstract = {The overall aim of our research is to improve the techniques for synthesizing code generators in the Model-Driven Engineering (MDE) context. Code generation is one of the main elements of Model-Driven Engineering, involving transformation from specification models to produce executable code. A code generator is designed to reduce the manual program construction work used to implement a software system, but building a code generator itself still currently needs much manual effort. Meanwhile, existing code generators are typically not flexible to adjust for changing development requirements and are hard to reuse for different target languages.Therefore, we aim to provide techniques to improve the process of building code generators, and let them be more reusable.Currently, we researched the related new and traditional approaches for generating code and projects using AI for program translation, code completion or program generation. Based on this research we decided to focus on a symbolic machine learning method related to the programming-by-example concept to build code generators. We use this "Code Generation By Example" (CGBE) concept with tree-to-tree structure mappings as the information format. CGBE has good performance in terms of training dataset size and time when applied to learning a UML-to-Java code generator, but further work is needed to extend it to generate different programming languages and to evaluate these cases, and to handle the optimisation of generated code.},
booktitle = {Proceedings of the 45th International Conference on Software Engineering: Companion Proceedings},
pages = {221–223},
numpages = {3},
keywords = {symbolic machine learning, model-driven engineering, model transformation by example, code generation},
location = {Melbourne, Victoria, Australia},
series = {ICSE '23}
}

@inproceedings{10.1109/MODELS-C.2019.00028,
author = {Burgue\~{n}o, Loli and Burdusel, Alexandru and G\'{e}rard, S\'{e}bastien and Wimmer, Manuel},
title = {MDE intelligence 2019: 1st workshop on artificial intelligence and model-driven engineering},
year = {2021},
isbn = {9781728151250},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MODELS-C.2019.00028},
doi = {10.1109/MODELS-C.2019.00028},
abstract = {Model-driven engineering (MDE) and Artificial Intelligence (AI) are two separate fields in computer science, which can clearly benefit from cross-fertilization and collaboration. There are at least two ways in which such integrations---which we call MDE Intelligence---can manifest: (1) MDE can benefit from integrating AI concepts and ideas to increasing the power and flexibility of model-driven techniques by means of the application of AI algorithms. (2) Conversely, AI can benefit from integrating concepts and ideas from MDE---for example, using domain-specific languages and model transformations allows domain experts to directly express and manipulate their problems while providing an auditable computation pipeline.To discuss and further stimulate such integrations, the 1st edition of the Workshop on Artificial Intelligence and Model-driven Engineering (MDE Intelligence) was held on September 16, 2019 in Munich, Germany, as part of the satellite events of the IEEE/ACM 22th International Conference on Model-Driven Engineering Languages and Systems (MODELS 2019).},
booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
pages = {168–169},
numpages = {2},
keywords = {artificial intelligence, MDE intelligence, MDE},
location = {Munich, Germany},
series = {MODELS '19}
}

@inproceedings{10.1145/3575693.3575694,
author = {Zhao, Tian and Rucker, Alexander and Olukotun, Kunle},
title = {Sigma: Compiling Einstein Summations to Locality-Aware Dataflow},
year = {2023},
isbn = {9781450399166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3575693.3575694},
doi = {10.1145/3575693.3575694},
abstract = {Most dataflow accelerator compilers achieve high performance by mapping each node in a dataflow program to a dedicated hardware element on a dataflow accelerator. However, this approach misses critical data reuse optimizations required to exploit the data bandwidth from fine-grained memory elements, e.g., FIFOs and pipeline registers. Moreover, writing performant dataflow programs requires users to have domain expertise in the underlying dataflow accelerators.  

To address these issues, we designed Sigma, a novel compiler that supports high-level programming constructs such as Einstein summations, index notations, and tensors, finds opportunities for data reuse from high-level dataflow graphs, and exploits on-chip data bandwidth from fine-grained memory elements. Sigma targeting a research dataflow accelerator demonstrates a 5.4x speedup and 44.6x area-normalized speedup over Nvidia's V100 accelerator, and a 7.1x speedup over hand-written dataflow programs.},
booktitle = {Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 2},
pages = {718–732},
numpages = {15},
keywords = {reconfigurable dataflow accelerator, neural networks, machine learning, index notation, hardware acceleration, domain-specific language, compiler},
location = {Vancouver, BC, Canada},
series = {ASPLOS 2023}
}

@inproceedings{10.1109/ICSE-NIER.2019.00014,
author = {Stephan, Matthew},
title = {Towards a cognizant virtual software modeling assistant using model clones},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-NIER.2019.00014},
doi = {10.1109/ICSE-NIER.2019.00014},
abstract = {We present our new ideas on taking the first steps towards cultivating synergy between model-driven engineering (MDE), machine learning, and software clones. Specifically, we describe our vision in realizing a cognizant virtual software modeling assistant that uses the latter two to improve software design and MDE. Software engineering has benefited greatly from knowledge-based cognizant source code completion and assistance, but MDE has few and limited analogous capabilities. We outline our research directions by describing our vision for a prototype assistant that provides suggestions to modelers performing model creation or extension in the form of 1) complete models for insertion or guidance, and 2) granular single-step operations. These suggestions are derived by detecting clones of the in-progress model and existing domain, organizational, and exemplar models. We overview our envisioned workflow between modeler and assistant, and, using Simulink as an example, illustrate different manifestations including multiple overlays with percentages and employing variant elements.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering: New Ideas and Emerging Results},
pages = {21–24},
numpages = {4},
keywords = {software modeling, model driven engineering, model clones, model clone detection, machine learning},
location = {Montreal, Quebec, Canada},
series = {ICSE-NIER '19}
}

@inproceedings{10.1145/3303772.3303786,
author = {Lee, Jinseok and Yeung, Dit-Yan},
title = {Knowledge Query Network for Knowledge Tracing: How Knowledge Interacts with Skills},
year = {2019},
isbn = {9781450362566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3303772.3303786},
doi = {10.1145/3303772.3303786},
abstract = {Knowledge Tracing (KT) is to trace the knowledge of students as they solve a sequence of problems represented by their related skills. This involves abstract concepts of students' states of knowledge and the interactions between those states and skills. Therefore, a KT model is designed to predict whether students will give correct answers and to describe such abstract concepts. However, existing methods either give relatively low prediction accuracy or fail to explain those concepts intuitively. In this paper, we propose a new model called Knowledge Query Network (KQN) to solve these problems. KQN uses neural networks to encode student learning activities into knowledge state and skill vectors, and models the interactions between the two types of vectors with the dot product. Through this, we introduce a novel concept called probabilistic skill similarity that relates the pairwise cosine and Euclidean distances between skill vectors to the odds ratios of the corresponding skills, which makes KQN interpretable and intuitive.On four public datasets, we have carried out experiments to show the following: 1. KQN outperforms all the existing KT models based on prediction accuracy. 2. The interaction between the knowledge state and skills can be visualized for interpretation. 3. Based on probabilistic skill similarity, a skill domain can be analyzed with clustering using the distances between the skill vectors of KQN. 4. For different values of the vector space dimensionality, KQN consistently exhibits high prediction accuracy and a strong positive correlation between the distance matrices of the skill vectors.},
booktitle = {Proceedings of the 9th International Conference on Learning Analytics \&amp; Knowledge},
pages = {491–500},
numpages = {10},
keywords = {Massive Open Online Courses, Learning Analytics, Learner Modeling, Knowledge Tracing, Knowledge Modeling, Intelligent Tutoring Systems, Educational Data Mining, Domain Modeling, Deep Learning},
location = {Tempe, AZ, USA},
series = {LAK19}
}

@inproceedings{10.1145/3581961.3609844,
author = {Winkelmann, Sven and B\"{u}ttner, Max and Deivasihamani, Dharani and von Hoffmann, Alexander and Flohr, Fabian},
title = {Using Node-RED as a Low-Code Approach to Model Interaction Logic of Machine-Learning-Supported eHMIs for the Virtual Driving Simulator Carla},
year = {2023},
isbn = {9798400701122},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3581961.3609844},
doi = {10.1145/3581961.3609844},
abstract = {External Human-Machine Interfaces&nbsp;(eHMI) enable interaction between vehicles and Vulnerable Road Users&nbsp;(VRU), for example, to warn VRUs of the car’s presence. Warning systems should warn of the situation’s urgency, which can be achieved using Machine Learning&nbsp;(ML)-based VRU detection models. ML models and eHMI interaction concepts are usually developed by different teams and tested separately, often resulting in integration problems. This work contributes to a low-code approach to model interaction concepts involving ML models to enable end-to-end prototypes for early integration and User eXperience&nbsp;(UX) testing. We use flow-based modeling with Node-RED, the virtual driving simulator CARLA and YOLOv5 as state-of-the-art deep learning techniques for VRU detection. We show two scenarios (cornering lights and context-aware VRU warning) in an interactive demonstrator, meaning a manual live control of pedestrian and car. We consider our approach to model and evaluate interaction concepts without writing code feasible for non-computer scientists.},
booktitle = {Adjunct Proceedings of the 15th International Conference on Automotive User Interfaces and Interactive Vehicular Applications},
pages = {323–326},
numpages = {4},
keywords = {user experience testing, rapid prototyping, model inference, machine learning, low-code, interaction concept modeling, driving simulation},
location = {Ingolstadt, Germany},
series = {AutomotiveUI '23 Adjunct}
}

@inproceedings{10.1145/3543873.3587554,
author = {Chen, Eason and Roche, Niall and Tseng, Yuen-Hsien and Hernandez, Walter and Shangguan, Jiangbo and Moore, Alastair},
title = {Conversion of Legal Agreements into Smart Legal Contracts using NLP},
year = {2023},
isbn = {9781450394192},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3543873.3587554},
doi = {10.1145/3543873.3587554},
abstract = {A Smart Legal Contract (SLC) is a specialized digital agreement comprising natural language and computable components. The Accord Project provides an open-source SLC framework containing three main modules: Cicero, Concerto, and Ergo. Currently, we need lawyers, programmers, and clients to work together with great effort to create a usable SLC using the Accord Project. This paper proposes a pipeline to automate the SLC creation process with several Natural Language Processing (NLP) models to convert law contracts to the Accord Project’s Concerto model. After evaluating the proposed pipeline, we discovered that our NER pipeline accurately detects CiceroMark from Accord Project template text with an accuracy of 0.8. Additionally, our Question Answering method can extract one-third of the Concerto variables from the template text. We also delve into some limitations and possible future research for the proposed pipeline. Finally, we describe a web interface enabling users to build SLCs. This interface leverages the proposed pipeline to convert text documents to Smart Legal Contracts by using NLP models.},
booktitle = {Companion Proceedings of the ACM Web Conference 2023},
pages = {1112–1118},
numpages = {7},
keywords = {Blockchain, Domain Specific Language, Human-AI collaboration, Information Retrieval, Smart Legal Contract},
location = {<conf-loc>, <city>Austin</city>, <state>TX</state>, <country>USA</country>, </conf-loc>},
series = {WWW '23 Companion}
}

@inproceedings{10.1109/UCC.2014.36,
author = {Ferry, Nicolas and Song, Hui and Rossini, Alessandro and Chauvel, Franck and Solberg, Arnor},
title = {Cloud MF: Applying MDE to Tame the Complexity of Managing Multi-cloud Applications},
year = {2014},
isbn = {9781479978816},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/UCC.2014.36},
doi = {10.1109/UCC.2014.36},
abstract = {The market of cloud computing encompasses an ever-growing number of cloud providers offering a multitude of infrastructure-as-a-service (IaaS) and platform-as-a-service (PaaS) solutions. The heterogeneity of these solutions hinders the proper exploitation of cloud computing since it prevents interoperability and promotes vendor lock-in, which increases the complexity of executing and managing multi-cloud applications (i.e., Applications that can be deployed across multiple cloud infrastructures and platforms). Providers of multi-cloud applications seek to exploit the peculiarities of each cloud solution and to combine the delivery models of IaaS and PaaS in order to optimise performance, availability, and cost. In this paper, we show how the Cloud Modelling Framework leverages upon model-driven engineering to tame this complexity by providing: (i) a tool-supported domain-specific language for specifying the provisioning and deployment of multi-cloud applications, and (ii) a models@run-time environment for enacting the provisioning, deployment, and adaptation of these applications.},
booktitle = {Proceedings of the 2014 IEEE/ACM 7th International Conference on Utility and Cloud Computing},
pages = {269–277},
numpages = {9},
keywords = {multi-cloud, Model-driven engineering, Cloud computing, Cloud ML},
series = {UCC '14}
}

@inproceedings{10.1145/1519130.1519133,
author = {Clemente, Pedro J. and Conejero, Jos\'{e} M. and Hern\'{a}ndez, Juan and S\'{a}nchez, Lara},
title = {HAAIS-DSL: DSL to develop home automation and ambient intelligence systems},
year = {2009},
isbn = {9781605584645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1519130.1519133},
doi = {10.1145/1519130.1519133},
abstract = {Domain Specific Language (DSL) is an emergent software engineering discipline that allows software architects to model systems based on the elements of a specific domain. Home Automation (HA) and Ambient Intelligence (AmI) are examples of specific domains and they are considered the key elements in the future of home development. However, software for these domains is usually hand coded based on embedded devices and specific implementation technologies and frameworks. In this paper we present a Model Driven Development (MDD) approach to develop software systems for HA and AmI. A Domain Specific Language has been designed to model the architecture of these kinds of systems. Then, taking as input the architecture models, a set of model transformations allows code and configuration generation for a specific device platform like KNX/EIB (European Installation Bus).},
booktitle = {Proceedings of the Second Workshop on Isolation and Integration in Embedded Systems},
pages = {13–18},
numpages = {6},
keywords = {model driven development, home automation, embedded devices, code generation, ambient intelligence, DSL},
location = {Nuremburg, Germany},
series = {IIES '09}
}

@article{10.5555/3586589.3586747,
author = {Maiya, Arun S.},
title = {ktrain: a low-code library for augmented machine learning},
year = {2022},
issue_date = {January 2022},
publisher = {JMLR.org},
volume = {23},
number = {1},
issn = {1532-4435},
abstract = {We present ktrain, a low-code Python library that makes machine learning more accessible and easier to apply. As a wrapper to TensorFlow and many other libraries (e.g., transformers, scikit-learn, stellargraph), it is designed to make sophisticated, state-of-the-art machine learning models simple to build, train, inspect, and apply by both beginners and experienced practitioners. Featuring modules that support text data (e.g., text classification, sequence tagging, open-domain question-answering), vision data (e.g., image classification), graph data (e.g., node classification, link prediction), and tabular data, ktrain presents a simple unified interface enabling one to quickly solve a wide range of tasks in as little as three or four "commands" or lines of code.},
journal = {J. Mach. Learn. Res.},
month = {jan},
articleno = {158},
numpages = {6},
keywords = {tabular data, graphs, computer vision, nlp, low-code machine learning}
}

@inproceedings{10.1145/2420918.2420921,
author = {Pati, Tanumoy and Feiock, Dennis C. and Hill, James H.},
title = {Proactive modeling: auto-generating models from their semantics and constraints},
year = {2012},
isbn = {9781450316347},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2420918.2420921},
doi = {10.1145/2420918.2420921},
abstract = {This paper discusses how DSML semantics and constraints enable proactive modeling---a form of model intelligence that foresees model transformations, automatically executes them, and prompts the modeler for assistance when necessary. This paper also shows how we integrated proactive modeling into the Generic Modeling Environment (GME). Our experience using proactive modeling shows that it can reduce modeling effort by both automatically generating required model elements, and guiding modelers to select what actions should be executed on the model.},
booktitle = {Proceedings of the 2012 Workshop on Domain-Specific Modeling},
pages = {7–12},
numpages = {6},
keywords = {proactive modeling, model-driven engineering, model intelligence, domain-specific modeling language},
location = {Tucson, Arizona, USA},
series = {DSM '12}
}

@inproceedings{10.1145/3550355.3552453,
author = {Safdar, Aon and Azam, Farooque and Anwar, Muhammad Waseem and Akram, Usman and Rasheed, Yawar},
title = {MoDLF: a model-driven deep learning framework for autonomous vehicle perception (AVP)},
year = {2022},
isbn = {9781450394666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550355.3552453},
doi = {10.1145/3550355.3552453},
abstract = {Modern vehicles are extremely complex embedded systems that integrate software and hardware from a large set of contributors. Modeling standards like EAST-ADL have shown promising results to reduce complexity and expedite system development. However, such standards are unable to cope with the growing demands of the automotive industry. A typical example of this phenomenon is autonomous vehicle perception (AVP) where deep learning architectures (DLA) are required for computer vision (CV) tasks like real-time object recognition and detection. However, existing modeling standards in the automotive industry are unable to manage such CV tasks at a higher abstraction level. Consequently, system development is currently accomplished through modeling approaches like EAST-ADL while DLA-based CV features for AVP are implemented in isolation at a lower abstraction level. This significantly compromises productivity due to integration challenges. In this article, we introduce MoDLF - A Model-Driven Deep learning Framework to design deep convolutional neural network (DCNN) architectures for AVP tasks. Particularly, Model Driven Architecture (MDA) is leveraged to propose a metamodel along with a conformant graphical modeling workbench to model DCNNs for CV tasks in AVP at a higher abstraction level. Furthermore, Model-To-Text (M2T) transformations are provided to generate executable code for MATLAB® and Python. The framework is validated via two case studies on benchmark datasets for key AVP tasks. The results prove that MoDLF effectively enables model-driven architectural exploration of deep convnets for AVP system development while supporting integration with renowned existing standards like EAST-ADL.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
pages = {187–198},
numpages = {12},
keywords = {model-driven architecture, model transformation, low code, deep learning, computer vision, autonomous vehicles perception},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/2379636.2379643,
author = {Gallardo, Jes\'{u}s and Molina, Ana Isabel and Bravo, Crescencio},
title = {A framework for the design of awareness support in collaborative situations of implicit interaction},
year = {2012},
isbn = {9781450313148},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2379636.2379643},
doi = {10.1145/2379636.2379643},
abstract = {The application of the Ambient Intelligence (AmI) approach implies the use of new styles of computer-human interaction as well as the need of supporting activities of collaborative nature. In these contexts, the concept of implicit interaction refers to those actions that a computer considers as inputs although the user has not intended to generate an input in an explicit way. In order to provide AmI scenarios in which collaborative activities takes place with computational support, classic concepts about computer-human interaction are not enough, for example, when giving support to awareness. Thus, in this paper a framework for the design of awareness support in collaborative AmI applications is proposed. This framework takes the work by Gutwin and Greenberg on explicit interaction as a starting point and intends to serve as a design guide for developers who need to create such a system. Also, this work settles the basis for a future model-based development method for collaborative AmI systems that takes into account awareness issues.},
booktitle = {Proceedings of the 13th International Conference on Interacci\'{o}n Persona-Ordenador},
articleno = {7},
numpages = {2},
keywords = {model-driven development, implicit human-computer interaction, awareness support in collaborative systems, ambient intelligence},
location = {Elche, Spain},
series = {INTERACCION '12}
}

@inproceedings{10.1145/3550356.3559090,
author = {Wete, Eric and Greenyer, Joel and Kudenko, Daniel and Nejdl, Wolfgang and Flegel, Oliver and Eisner, Dennes},
title = {A tool for the automation of efficient multi-robot choreography planning and execution},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3559090},
doi = {10.1145/3550356.3559090},
abstract = {In the automotive industry, the design, modeling, and planning of multi-robot cells are manual error-prone, and time-expensive tasks. A recent work investigated, using reactive synthesis, approaches to automate robot task planning, and execution. In this paper, we present a tool that realizes a model-at-runtime approach. The tool is integrated with a robot simulation tool, to automate efficient multi-robot choreography planning, and execution. We illustrate the tool using a multi-robot spot welding cell, inspired from an industrial case. Given a virtual model of the production cell, and user constraints definition, the tool can derive a specification for the reactive synthesis. The tool integrates the synthesized controller with the production cell execution, and in real time, optimizes the strategies by considering the uncertainties. The system can select among several correct, and safe actions, the optimal action using AI-based planning techniques, such as the Monte Carlo Tree Search (MCTS) algorithm. We showcase our tool, illustrate its implementation architecture, including how it can support robot experts for automated planning and execution of production cells.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {37–41},
numpages = {5},
keywords = {task scheduling, reactive synthesis, multi-robot motion planning, model-driven engineering, AI-based optimization},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@article{10.1145/3004294,
author = {Georgievski, Ilche and Aiello, Marco},
title = {Automated Planning for Ubiquitous Computing},
year = {2016},
issue_date = {December 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/3004294},
doi = {10.1145/3004294},
abstract = {The goal of ubiquitous computing is to create ambience in which one’s experiences and quality of life are improved by monitoring and assisting people using ubiquitous technologies and computation in coherence. The continuous advancements of involved technologies, such as wireless communications, mobile devices, and sensors, imply fast evolution of ubiquitous computing environments too. The complexity of these environments is reaching a point where traditional solutions simply no longer work. The environments are in need of computational techniques that can deal with the evolution and uncertainty of ubiquitous computing environments dynamically and automatically. Artificial Intelligence (AI) can contribute towards satisfying this future scenario in many ways, while numerous approaches inspired by work in the AI planning community have already been designed for ubiquitous computing. We devote this study to investigate the current progress of AI planning for ubiquitous computing by analysing those approaches. We rigorously search for and select relevant literature out of which we extract qualitative information. Using the extracted qualities, we derive a generic framework that consists of aspects important to planning for ubiquitous computing. The framework’s main purpose is to facilitate the understanding of those aspects, and classify the literature according to them. We then analyse the literature in a consolidated way, and identify future challenges of planning for ubiquitous computing.},
journal = {ACM Comput. Surv.},
month = {dec},
articleno = {63},
numpages = {46},
keywords = {smart environments, planning techniques, pervasive computing, ambient intelligence, Planning domain modelling}
}

@inproceedings{10.1109/MODELS-C.2019.00108,
author = {Saini, Rijul and Mussbacher, Gunter and Guo, Jin L. C. and Kienzle, J\"{o}rg},
title = {Teaching modelling literacy: an artificial intelligence approach},
year = {2021},
isbn = {9781728151250},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MODELS-C.2019.00108},
doi = {10.1109/MODELS-C.2019.00108},
abstract = {In Model-Driven Engineering (MDE), models are used to build and analyze complex systems. In the last decades, different modelling formalisms have been proposed for supporting software development. However, their adoption and practice strongly rely on mastering essential modelling skills to develop a complete and coherent model-based system. Moreover, it is often difficult for novice modellers to get direct and timely feedback and recommendations on their modelling strategies and decisions, particularly in large classroom settings which hinders their learning. Certainly, there is an opportunity to apply Artificial Intelligence (AI) techniques to an MDE learning environment to empower the provisioning of automated and intelligent modelling advocacy. In this paper, we propose a framework called ModBud (a modelling buddy) to educate novice modellers about the art of abstraction. ModBud uses natural language processing (NLP) and machine learning (ML) to create modelling bots with the aim of improving the modelling skills of novice modellers and assisting other practitioners, too. These bots could be used to support teaching with automatic creation or grading of models and enhance learning beyond the traditional classroom-based MDE education with timely feedback and personalized tutoring. Research challenges for the proposed framework are discussed and a research roadmap is presented.},
booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
pages = {714–719},
numpages = {6},
keywords = {models, bots, NLP, ModBud, ML, MDE, AI},
location = {Munich, Germany},
series = {MODELS '19}
}

@inproceedings{10.1145/3141128.3141138,
author = {Zafar, Muhammad Nouman and Azam, Farooque and Rehman, Saad and Anwar, Muhammad Waseem},
title = {A Systematic Review of Big Data Analytics Using Model Driven Engineering},
year = {2017},
isbn = {9781450353434},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3141128.3141138},
doi = {10.1145/3141128.3141138},
abstract = {In this era of information technology, there is a huge and excessive amount of fully distributed, structured and unstructured data which is usually referred as 'Big Data'. This data cannot be easily and directly used for business purposes due to its excessiveness nature. Therefore, it is required to intelligently process this large amount of data to extract desired information and examine pattern to make decisions and predictions for certain business objectives. In this context, Model Driven Engineering (MDE) techniques are frequently applied for Big Data analytics. This paper investigates the latest models, approaches and tools for Big Data analytics using model driven approaches. Particularly, a Systematic Literature Review (SLR) is performed to select and analyze 24 researches published during 2010 to 2017. This leads to identify 18 models, 13 tools, and 10 approaches for big data analytics using model driven approaches. The findings of this SLR are highly valuable for the researchers, students and practitioners of the domain.},
booktitle = {Proceedings of the 2017 International Conference on Cloud and Big Data Computing},
pages = {1–5},
numpages = {5},
keywords = {Model driven big data analytics, MDE, Big data predictive models, Big data},
location = {London, United Kingdom},
series = {ICCBDC '17}
}

@article{10.1145/3638247,
author = {Cheng, Yu and Chen, Jieshan and Huang, Qing and Xing, Zhenchang and Xu, Xiwei and Lu, Qinghua},
title = {Prompt Sapper: A LLM-Empowered Production Tool for Building AI Chains},
year = {2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
issn = {1049-331X},
url = {https://doi.org/10.1145/3638247},
doi = {10.1145/3638247},
abstract = {The emergence of foundation models, such as large language models (LLMs) GPT-4 and text-to-image models DALL-E, has opened up numerous possibilities across various domains. People can now use natural language (i.e. prompts) to communicate with AI to perform tasks. While people can use foundation models through chatbots (e.g., ChatGPT), chat, regardless of the capabilities of the underlying models, is not a production tool for building reusable AI services. APIs like LangChain allow for LLM-based application development but require substantial programming knowledge, thus posing a barrier. To mitigate this, we systematically review, summarise, refine and extend the concept of AI chain by incorporating the best principles and practices that have been accumulated in software engineering for decades into AI chain engineering, to systematize AI chain engineering methodology. We also develop a no-code integrated development environment, Prompt Sapper
, which embodies these AI chain engineering principles and patterns naturally in the process of building AI chains, thereby improving the performance and quality of AI chains. With Prompt Sapper, AI chain engineers can compose prompt-based AI services on top of foundation models through chat-based requirement analysis and visual programming. Our user study evaluated and demonstrated the efficiency and correctness of Prompt Sapper.},
note = {Just Accepted},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {dec},
keywords = {SE for AI, No/Low Code, Large Language Models, Visual Programming, AI Chain Engineering}
}

@inproceedings{10.1145/3417990.3420050,
author = {Barzdins, Paulis and Celms, Edgars and Barzdins, Janis and Kalnins, Audris and Sprogis, Arturs and Grasmanis, Mikus and Rikacovs, Sergejs},
title = {Metamodel specialization based DSL for DL lifecycle data management},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3417990.3420050},
doi = {10.1145/3417990.3420050},
abstract = {A new Domain Specific Language (DSL) based approach to Deep Learning (DL) lifecycle data management (LDM) is presented: a very simple but universal DL LDM tool, still usable in practice (called Core tool); and an advanced extension mechanism, that converts the Core tool into a DSL tool building framework for DL LDM tasks. The method used is based on the metamodel specialisation approach for DSL modeling tools introduced by authors.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {16},
numpages = {2},
keywords = {metamodel specialization, DSL, DL lifecycle data management},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@inproceedings{10.1145/2829875.2829880,
author = {Garcia-Sanjuan, Fernando and Jaen, Javier and Catala, Alejandro},
title = {Multi-Display Environments to Foster Emotional Intelligence in Hospitalized Children},
year = {2015},
isbn = {9781450334631},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2829875.2829880},
doi = {10.1145/2829875.2829880},
abstract = {Long-term and frequent hospitalized children are under high loads of emotional stress, which affects their well-being in addition to the illness they are suffering. This thesis proposes and will focus on an approach to use Multi-Display Environments (MDE) in pediatric hospitalization contexts to improve patients' emotional intelligence so they can deal with the negative emotions produced by their situation.},
booktitle = {Proceedings of the XVI International Conference on Human Computer Interaction},
articleno = {13},
numpages = {2},
keywords = {Socialization, Multi-Display Environments (MDE), Hospitalization, Emotional Intelligence, Child-Computer Interaction},
location = {Vilanova i la Geltru, Spain},
series = {Interacci\'{o}n '15}
}

