@inbook{10.5555/3042094.3042482,
author = {Pelosi, Michael J. and Brown, Michael Scott},
title = {Software Engineering a Multi-Layer and Scalable Autonomous Forces "A.I." for Professional Military Training},
year = {2016},
isbn = {9781509044849},
publisher = {IEEE Press},
abstract = {Described herein is a general-purpose software engineering architecture for autonomous, computer controlled opponent implementation in modern maneuver warfare simulation and training. The implementation has been developed, refined, and tested in the user crucible for several years. The approach represents a hybrid application of various well-known AI techniques, including domain modeling, agent modeling, and object-oriented programming. Inspired by computer chess approaches, the methodology combines this theoretical foundation with a hybrid and scalable portfolio of additional techniques. The result remains simple enough to be maintainable and comprehensible for the code writers as well as the end-users, and robust enough to handle a wide spectrum of possible mission scenarios and circumstances without modification.},
booktitle = {Proceedings of the 2016 Winter Simulation Conference},
pages = {3122–3133},
numpages = {12}
}

@inproceedings{10.5555/3237383.3237990,
author = {Lallement, Rapha\"{e}l and de Silva, Lavindra and Alami, Rachid},
title = {HATP: Hierarchical Agent-Based Task Planner},
year = {2018},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
address = {Richland, SC},
abstract = {Hierarchical Task Network (HTN) planning is a proven approach to solving complex, real world planning problems more efficiently than planning from first principles when 'standard operating procedures' (or `recipes') can be supplied by the user. By planning for tasks in the same order that they are later executed, total-order HTN planners always know the complete state of the world at each planning step. This enables writing more expressive planning domains than what is possible in partial-order HTN planning, such as preconditions with calls to external procedures. Such features have facilitated the use of total-order HTN planners in agent systems and seen them excel in AI games. This paper describes the Hierarchical Agent-based Task Planner (HATP), a total-order HTN planner. Since its first implementation, HATP has had various extensions and integrations over the years, such as support for splitting a solution into multiple streams and assigning them to the agents in the domain; modelling their beliefs as distinct world states; allowing 'social rules' to be included by the user to define what kind of agent behaviour is appropriate; allowing tasks to be planned by taking the human's safety and comfort into account; and to interleave HTN and geometric planning. Since many of these implementations have remained prototypes, we have significantly enhanced them as well as HATP itself, and integrated them into a stand-alone distribution, which is now available as open source software (under a BSD 2-Clause License). This paper presents some of our recent improvements to HATP, and gives an overview of its user-friendly language, which treats agents as distinct entities; its mechanisms for effective control over decomposition; and its integration into our larger robotics framework.},
booktitle = {Proceedings of the 17th International Conference on Autonomous Agents and MultiAgent Systems},
pages = {1823–1825},
numpages = {3},
keywords = {geometric planning, htn planning, multi-robot planning},
location = {Stockholm, Sweden},
series = {AAMAS '18}
}

@inproceedings{10.5555/1123196.1123314,
author = {Malyankar, R. M. and Baddam, A.},
title = {XML Schemas from Computational Ontologies},
year = {2003},
publisher = {Digital Government Society of North America},
abstract = {Academic researchers in artificial intelligence tend to use computational ontologies for knowledge modeling whereas commercial developers tend to use XML schemas, even though there is considerable overlap between the two representations considered as models of knowledge domains. Each representation has its own advantages and disadvantages compared to the other. There are active initiatives on the representation of knowledge for Web technologies, e.g., RDF (Resource Description Framework), and OWL (Web Ontology Language). These efforts often include ontology and schema editors that try to make schemas adhere to well-defined domain modeling principles, usually drawn from AI research in knowledge representation. This work is generally part of semantic web research. However, application developer communities have long accepted XML markup technology for data structuring, even though XML lacks (or rather, does not require) well-defined, rigorous domain models; the fact that such rigor is not required means that XML vocabularies are proliferating, and variant and ill-constructed models of domains and XML markup vocabularies are becoming set in stone by the effort that has gone into developing XML-based applications around them. One way to avoid this, and pave the way for future semantic web applications, is to devise a way to create and maintain a well-defined and unambiguous link between XML schemas and XML vocabularies and computational ontologies.Our XML schema generator is intended for ontologies represented in Protege. The schema generator maps ontology classes to named complex types in the format of the XML Schema specification; slots in the ontology are (at the user's option) either attributes for the complex types corresponding to the classes, or sub-elements in those same complex types. Range restrictions on the values of slots in the ontology are preserved and enumerated ranges are transformed into schema enumerations. Class inheritance relationships are converted into XML schema extension relationships. Metadata for classes and attributes is placed into schema annotation elements. Schema metadata can also be entered by the user. The schema generator optionally compels adherence to the naming standards in the Department of the Navy draft guidelines for XML schema development. The validity of the XML type libraries generated by this tool has been verified using schema validation tools available on XML Schema-related web sites.The difference between the expressive power of XML schemas and ontologies means certain features cannot be transformed. However, we find that for limited purposes, namely, turning ontologies into XML schema type libraries, the tool is useful even in its current form - it certainly speeds up the process of XML schema creation, because the taxonomical content of XML schemas, i.e., defining inheritance relationships, attributes, slot value ranges, etc., is easier with an ontology editor; so far, adding the unrepresented information to the sype libraries after the fact has not been too laborious a task - though it is certainly error-prone and repetitive, and we are investigating means of automating it or representing all the details necessary for XML schemas in ontologies.The XML schema generator described here is being used in WIN (Waterway Information Network), a proposed distributed content management architecture for marine transportation information, described in a companion paper in this conference (Malyankar et al 2003). The rationale underlying the use of such a schema generator is outlined above and in the companion paper: facilitating linkage between AI concepts of ontologies and programming structures for XML, thereby providing a formal and logically sound basis for XML application development. We hope this is one route from current Web technology to the Semantic Web; i.e., it is transitional technology that should ease progression to the semantic web.},
booktitle = {Proceedings of the 2003 Annual National Conference on Digital Government Research},
pages = {1},
numpages = {1},
location = {Boston, MA, USA},
series = {dg.o '03}
}

